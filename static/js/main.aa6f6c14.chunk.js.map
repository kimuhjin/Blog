{"version":3,"sources":["Views/Header.js","Posts/PostWrapper.js","Posts/Post1.js","Posts/Post2.js","Posts/Post3.js","Posts/PostsRender.js","Components/HeroImage.js","Views/Home.js","Views/Footer.js","Portfolios/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","HeaderContainer","HeaderBox","Title","to","Menu","size","styled","div","Link","Image","props","style","maxWidth","CodeBlock","background","color","padding","borderRadius","value","PostWrapper","text","title","time","Md","require","BodyContainer","Time","Article","source","renderers","image","code","Post1","Post2","Post3","PostsRender","exact","path","component","HeroImage","SnsButton","href","LinkTo","LinkButton","a","Home","Posts","Post","RanderPosts","map","data","PostBox","PostsContainer","Category","length","Footer","Main","PortContainer","PortBox","WorkContainer","WorkBox","Work","App","PageContainer","Portfolios","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa6f6c14.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport { FiMenu } from \"react-icons/fi\";\n\nfunction Header() {\n  return (\n    <Fragment>\n      <HeaderContainer>\n        <HeaderBox>\n          <Title to=\"/\">Blog</Title>\n          <Menu>\n            <FiMenu size={36} />\n          </Menu>\n        </HeaderBox>\n      </HeaderContainer>\n    </Fragment>\n  );\n}\n\nexport default Header;\nconst Menu = styled.div`\n  cursor: pointer;\n`;\n\nconst HeaderBox = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 1200px;\n  height: 100%;\n  padding: 0px 20px;\n  box-sizing: border-box;\n`;\nconst Title = styled(Link)`\n  font-size: 24px;\n  /* font-weight: bold; */\n  text-decoration: none;\n  color: black;\n`;\n\nconst HeaderContainer = styled.div`\n  font-family: \"Orbitron\", sans-serif;\n  position: fixed;\n  display: flex;\n  top: 0;\n  z-index: 9999;\n  justify-content: center;\n  align-items: center;\n  height: 80px;\n  width: 100%;\n  border-bottom: 1px solid lightgray;\n  box-sizing: border-box;\n  background-color: white;\n`;\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nfunction Image(props) {\n  return <img {...props} style={{ maxWidth: \"100%\" }} />;\n}\nfunction CodeBlock(props) {\n  return (\n    <pre\n      style={{\n        background: \"#000\",\n        color: \"#fff\",\n        padding: 10,\n        borderRadius: 10,\n      }}\n    >\n      <code>{props.value}</code>\n    </pre>\n  );\n}\nfunction PostWrapper({ text, title, time }) {\n  const Md = require(\"react-markdown\");\n\n  return (\n    <Fragment>\n      <BodyContainer>\n        <Title>{title}</Title>\n        <Time>{time}</Time>\n        <Article>\n          <Md source={text} renderers={{ image: Image, code: CodeBlock }} />\n        </Article>\n      </BodyContainer>\n    </Fragment>\n  );\n}\n\nexport default PostWrapper;\n\nconst Article = styled.div`\n  border: 1px solid lightgray;\n  border-left: 0px;\n  border-right: 0px;\n  padding: 70px 0px;\n  overflow: scroll;\n`;\n\nconst Hr = styled.div`\n  border-top: 1px solid lightgray;\n`;\nconst Title = styled.div`\n  font-size: 30px;\n  margin-bottom: 10px;\n`;\nconst Time = styled.div`\n  font-size: 14px;\n  color: gray;\n  margin-bottom: 10px;\n`;\n\nconst BodyContainer = styled.div`\n  padding: 100px 10px;\n  max-width: 1000px;\n  height: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  @media (max-width: 768px) {\n    max-width: 100%;\n    margin-left: 0px;\n    margin-right: 0px;\n  }\n`;\n","import PostWrapper from \"./PostWrapper\";\nimport React from \"react\";\n\nfunction Post1() {\n  const title = \"[React] 커뮤니티 웹사이트 개발일지 #1 (Login)\";\n  const time = \"2020.06.15\";\n  const text = `\n### 커뮤니티 웹사이트 프로젝트의 로그인 패턴은 다음과 같다.\n  ![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FceLV2b%2FbtqESXpoa4r%2Fk1VUxkO5LN67buV5XGue2k%2Fimg.png)\n\n#### 1.  프론트엔드 LoginPage에서 Email과 Password 값을 받아 api/login 을 콜한다.\n#### 2.  백엔드 api/login에서 프론트엔드에서 전송한 email과 password 값을 전송받아 다음과 같은 methods를 실행한다.\n#### 3.\n##### A. FindOne\n\n1. 해당 req.email값으로 User를 조회하고, 조회된 데이터를 user로 받는다.\n\n2. user가 존재한다면 comparePassword를 실행한다.\n\n##### B. ComparePassword\n\n1. req.password값과 user.password를 비교한 뒤, 동일한지 확인한다.\n\n2. 동일하다면 generateToken을 실행한다.\n\n##### C. GenerateToken\n\n1. user에서 .id 값을 16진수로 변환한 뒤, secret값과 함께 jwt를 통해 인코딩을 하고 user.token으로 반환한다.\n\n2. 토큰 유효기간을 설정한뒤, user.tokenExp로 받아온다.\n\n3. user에 user.token과 user.tokenExp값을 저장한다.\n\n4. 해당 값을 쿠키에 저장한다.\n\n#### 4. json형식으로 loginSuccess값과 user._id값을 userId에 넣어 response한다.\n#### 5. 프론트엔드에서 dispatch를 통해 loginSuccess값을 스토어에 저장하고\n#### 6. userId값은 LocalStorage에 저장한다.\n  `;\n  return <PostWrapper text={text} title={title} time={time} />;\n}\n\nexport default Post1;\n","import PostWrapper from \"./PostWrapper\";\nimport React from \"react\";\n\nfunction Post2() {\n  const title = \"두번째 글\";\n  const time = \"2020.06.15\";\n  const text = `\n  마크다운 markdown 작성법\n\n  ======================\n  \n  # 1. 마크다운에 관하여\n  ## 1.1. 마크다운이란?\n  [**Markdown**](http://whatismarkdown.com/)은 텍스트 기반의 마크업언어로 2004년 존그루버에 의해 만들어졌으며 쉽게 쓰고 읽을 수 있으며 HTML로 변환이 가능하다. 특수기호와 문자를 이용한 매우 간단한 구조의 문법을 사용하여 웹에서도 보다 빠르게 컨텐츠를 작성하고 보다 직관적으로 인식할 수 있다.\n  마크다운이 최근 각광받기 시작한 이유는 깃헙([https://github.com](https://github.com)) 덕분이다. 깃헙의 저장소Repository에 관한 정보를 기록하는 README.md는 깃헙을 사용하는 사람이라면 누구나 가장 먼저 접하게 되는 마크다운 문서였다. 마크다운을 통해서 설치방법, 소스코드 설명, 이슈 등을 간단하게 기록하고 가독성을 높일 수 있다는 강점이 부각되면서 점점 여러 곳으로 퍼져가게 된다.\n  \n  ## 1.2. 마크다운의 장-단점\n  ### 1.2.1. 장점\n    1. 간결하다.\n    2. 별도의 도구없이 작성가능하다.\n    3. 다양한 형태로 변환이 가능하다.\n    3. 텍스트(Text)로 저장되기 때문에 용량이 적어 보관이 용이하다.\n    4. 텍스트파일이기 때문에 버전관리시스템을 이용하여 변경이력을 관리할 수 있다.\n    5. 지원하는 프로그램과 플랫폼이 다양하다.\n  ### 1.2.2. 단점\n    1. 표준이 없다.\n    2. 표준이 없기 때문에 도구에 따라서 변환방식이나 생성물이 다르다.\n    3. 모든 HTML 마크업을 대신하지 못한다.\n  \n  ****\n  `;\n  return <PostWrapper text={text} title={title} time={time} />;\n}\n\nexport default Post2;\n","import PostWrapper from \"./PostWrapper\";\nimport React from \"react\";\n\nfunction Post3() {\n  const title = \"세번째 글\";\n  const time = \"2020.06.15\";\n  const text = `\n### Post 관련\n1. PostWrapper\nPostWrapper에 React-MarkDown 라이브러리를 추가하고, styled-components를 통해 디자인을 미리 설정해논다.\n\n2. 같은 폴더에 Post# 파일을 만든뒤, title,time과 마크다운형식으로 쓴 text를 작성한 뒤, PostWrapper를 import 하고 PostWrapper에 위 title,time과 text를 props로 설정한 뒤, 이 컴포넌트를 리턴한다.\n\\`\\`\\`js\nfunction Image(props) {\n  return <img {...props} style={{ maxWidth: \"100%\" }} />;\n}\nfunction CodeBlock(props) {\n  return (\n    <pre style={{ background: \"#000\", color: \"#fff\", padding: 10 }}>\n      <code>{props.value}</code>\n    </pre>\n  );\n}\nfunction PostWrapper({ text, title, time }) {\n  const Md = require(\"react-markdown\");\n\n  return (\n    <Fragment>\n      <BodyContainer>\n        <Title>{title}</Title>\n        <Time>{time}</Time>\n        <Article>\n          <Md source={text} renderers={{ image: Image, code: CodeBlock }} />\n        </Article>\n      </BodyContainer>\n    </Fragment>\n  );\n}\n\nexport default PostWrapper;\n\\`\\`\\`\n`;\n  return <PostWrapper text={text} title={title} time={time} />;\n}\n\nexport default Post3;\n","import { Route } from \"react-router-dom\";\nimport React, { Fragment } from \"react\";\n\nimport Post1 from \"./Post1\";\nimport Post2 from \"./Post2\";\nimport Post3 from \"./Post3\";\n\nfunction PostsRender() {\n  return (\n    <Fragment>\n      <Route exact path=\"/Post1\" component={Post1} />\n      <Route exact path=\"/Post2\" component={Post2} />\n      <Route exact path=\"/Post3\" component={Post3} />\n    </Fragment>\n  );\n}\n\nexport default PostsRender;\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport { AiFillGithub } from \"react-icons/ai\";\nimport { AiFillInstagram } from \"react-icons/ai\";\n\nfunction HeroImage() {\n  return (\n    <Fragment>\n      <Image>\n        <SnsButton href=\"https://github.com/kimuhjin\">\n          <LinkTo href=\"https://github.com/kimuhjin\">\n            <AiFillGithub size={40} />\n          </LinkTo>\n        </SnsButton>\n        <LinkButton to=\"/Portfolios\">\n          <Title>Portfolios</Title>\n        </LinkButton>\n        <SnsButton href=\"https://github.com/kimuhjin\">\n          <LinkTo href=\"https://www.instagram.com/kimuhjin__/\">\n            <AiFillInstagram size={40} />\n          </LinkTo>\n        </SnsButton>\n      </Image>\n    </Fragment>\n  );\n}\n\nexport default HeroImage;\nconst LinkTo = styled.a`\n  cursor: pointer;\n  &:link {\n    color: black;\n  }\n  &:visited {\n    color: black;\n  }\n`;\nconst Title = styled.div`\n  font-family: \"Orbitron\", sans-serif;\n  font-size: 20px;\n  color: black;\n  text-decoration: none;\n  @media (max-width: 768px) {\n    font-size: 16px;\n  }\n`;\nconst SnsButton = styled.a`\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 150px;\n  height: 70px;\n  background-color: white;\n  opacity: 0.8;\n  border: 1px solid white;\n  border-radius: 10px;\n  transition: opacity 0.6s ease;\n  margin: 0px 10px;\n  &:hover {\n    opacity: 1;\n  }\n  @media (max-width: 768px) {\n    width: 130px;\n    height: 50px;\n  }\n`;\nconst LinkButton = styled(Link)`\n  cursor: pointer;\n  text-decoration: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 150px;\n  height: 70px;\n  background-color: white;\n  opacity: 0.8;\n  border: 1px solid white;\n  border-radius: 10px;\n  transition: opacity 0.6s ease;\n  margin: 0px 10px;\n  &:hover {\n    opacity: 1;\n  }\n  @media (max-width: 768px) {\n    width: 130px;\n    height: 50px;\n  }\n`;\n\nconst Image = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 80px;\n  width: 100%;\n  height: 500px;\n  background-image: url(\"https://images.unsplash.com/photo-1477959858617-67f85cf4f1df?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2013&q=80\");\n  background-repeat: no-repeat;\n  background-size: 100% 500px;\n  @media (max-width: 768px) {\n    height: 300px;\n    background-size: 100% 300px;\n  }\n`;\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport HeroImage from \"../Components/HeroImage\";\nfunction Home() {\n  const Posts = [\n    {\n      Title: \"[React] 커뮤니티 웹사이트 개발일지 #1 (Login)\",\n      Article: \"커뮤니티 웹사이트 개발일지 #1\",\n      Time: \"6월 15일\",\n      Post: \"Post1\",\n    },\n    {\n      Title: \"두번째 글\",\n      Article: \"두번째 글입니다.\",\n      Time: \"6월 15일\",\n      Post: \"Post2\",\n    },\n    {\n      Title: \"세번째 글\",\n      Article: \"세번째 글입니다.\",\n      Time: \"6월 15일\",\n      Post: \"Post3\",\n    },\n  ];\n  const RanderPosts = Posts.map((data) => {\n    return (\n      <PostBox to={data.Post}>\n        <Title>{data.Title}</Title>\n        <Article>{data.Article}</Article>\n        <Time>{data.Time}</Time>\n      </PostBox>\n    );\n  });\n  return (\n    <Fragment>\n      <HeroImage />\n      <BodyContainer>\n        <PostsContainer>\n          <Category>전체 게시물 ({Posts.length})</Category>\n          {RanderPosts}\n        </PostsContainer>\n      </BodyContainer>\n    </Fragment>\n  );\n}\n\nexport default Home;\n\nconst Category = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0px 50px;\n\n  height: 100px;\n  font-size: 28px;\n  color: gray;\n  box-sizing: border-box;\n`;\n\nconst Title = styled.div`\n  font-size: 24px;\n  font-weight: bold;\n  margin: 10px;\n  color: black;\n  &:hover {\n    color: gray;\n  }\n`;\nconst Article = styled.div`\n  font-size: 16px;\n  margin: 10px;\n  color: black;\n`;\nconst Time = styled.div`\n  font-size: 12px;\n  margin: 10px;\n  color: black;\n`;\n\nconst PostBox = styled(Link)`\n  display: block;\n  text-decoration: none;\n  cursor: pointer;\n  box-shadow: 1px 1px 2px 1px rgba(0, 0, 0, 0.18);\n  padding: 30px;\n  border-radius: 20px;\n  margin-bottom: 30px;\n`;\n\nconst PostsContainer = styled.div`\n  padding: 20px;\n`;\nconst BodyContainer = styled.div`\n  max-width: 1200px;\n  margin-left: auto;\n  margin-right: auto;\n  @media (max-width: 768px) {\n    max-width: 100%;\n    margin-left: 0px;\n    margin-right: 0px;\n  }\n`;\n","import React from \"react\";\n\nfunction Footer() {\n  return <div></div>;\n}\n\nexport default Footer;\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nfunction Main() {\n  return (\n    <Fragment>\n      <PortContainer>\n        <PortBox>\n          <WorkContainer>\n            <Title>Only-FrontEnd</Title>\n            <WorkBox>\n              <Work />\n              <Work />\n              <Work />\n            </WorkBox>\n          </WorkContainer>\n          <WorkContainer>\n            <Title>Full-Stack</Title>\n            <WorkBox>\n              <Work />\n              <Work />\n              <Work />\n            </WorkBox>\n          </WorkContainer>\n        </PortBox>\n      </PortContainer>\n    </Fragment>\n  );\n}\n\nexport default Main;\nconst Work = styled.div`\n  cursor: pointer;\n  margin: 30px 30px;\n  width: 200px;\n  height: 200px;\n  /* border: 1px solid black; */\n  box-shadow: 1px 1px 10px 1px lightgray;\n  border-radius: 10px;\n  box-sizing: border-box;\n  /* background-color: yellowgreen; */\n  margin-bottom: 50px;\n  transition: transform 0.5s;\n  -webkit-transform: translate3d(0, 0, 0);\n  /* -webkit-backface-visibility: hidden; */\n  &:hover {\n    transform: perspective(600px) rotateY(30deg);\n  }\n`;\nconst WorkBox = styled.div`\n  display: flex;\n  /* align-items: flex-start; */\n  flex-wrap: wrap;\n  border: 2px solid green;\n  box-sizing: border-box;\n  margin-bottom: 30px;\n`;\n\nconst Title = styled.div`\n  font-size: 28px;\n  font-family: \"Orbitron\", sans-serif;\n  margin-bottom: 30px;\n`;\n\nconst WorkContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst PortBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  min-height: 1000px;\n  padding: 50px 50px;\n  border: 3px solid blue;\n  box-sizing: border-box;\n  @media (max-width: 764px) {\n    padding: 0px 50px;\n  }\n`;\nconst PortContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  padding: 10px 10px;\n  max-width: 1200px;\n  min-height: 1000px;\n  border: 4px solid red;\n  box-sizing: border-box;\n  margin-left: auto;\n  margin-right: auto;\n  @media (max-width: 768px) {\n    max-width: 100%;\n    margin-left: 0px;\n    margin-right: 0px;\n  }\n`;\n","import React, { Fragment } from \"react\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Route } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport Header from \"./Views/Header\";\nimport PostsRender from \"./Posts/PostsRender\";\nimport Home from \"./Views/Home\";\nimport Footer from \"./Views/Footer\";\nimport Portfolios from \"./Portfolios/Main\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <HashRouter>\n        <Header />\n        <PageContainer>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/Portfolios\" component={Portfolios} />\n        </PageContainer>\n        <PostsRender />\n      </HashRouter>\n      <Footer />\n    </Fragment>\n  );\n}\n\nexport default App;\n\nconst PageContainer = styled.div`\n  margin-top: 80px;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
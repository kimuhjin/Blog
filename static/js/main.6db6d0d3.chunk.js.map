{"version":3,"sources":["Views/Header.js","Views/Home.js","Views/Footer.js","Posts/Post1.js","Posts/Post2.js","App.js","serviceWorker.js","index.js"],"names":["Header","HeaderContainer","Title","to","styled","Link","div","Home","Posts","Article","Time","Post","RanderPosts","map","data","PostBox","BodyContainer","PostsContainer","Category","length","Footer","Post1","Post2","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8qBAaeA,MAVf,WACE,OACE,kBAAC,WAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAOC,GAAG,SAAV,gCAQFD,EAAQE,YAAOC,IAAPD,CAAH,KAOLH,EAAkBG,IAAOE,IAAV,K,osCCiBNC,MApCf,WACE,IAAMC,EAAQ,CACZ,CACEN,MAAO,gBACPO,QAAS,mCACTC,KAAM,mBACNC,KAAM,SAER,CACET,MAAO,4BACPO,QAAS,+CACTC,KAAM,mBACNC,KAAM,UAGJC,EAAcJ,EAAMK,KAAI,SAACC,GAC7B,OACE,kBAACC,EAAD,CAASZ,GAAIW,EAAKH,MAChB,kBAAC,EAAD,KAAQG,EAAKZ,OACb,kBAACO,EAAD,KAAUK,EAAKL,SACf,kBAACC,EAAD,KAAOI,EAAKJ,UAIlB,OACE,kBAAC,WAAD,KACE,kBAACM,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,4BAAgBV,EAAMW,OAAtB,KACCP,MAQLM,EAAWd,IAAOE,IAAV,KAYRJ,EAAQE,IAAOE,IAAV,KASLG,EAAUL,IAAOE,IAAV,KAKPI,EAAON,IAAOE,IAAV,KAMJS,EAAUX,YAAOC,IAAPD,CAAH,KAUPa,EAAiBb,IAAOE,IAAV,KAGdU,EAAgBZ,IAAOE,IAAV,KC/EJc,MAJf,WACE,OAAO,+B,iMCUMC,MAVf,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,KACE,uCAOFL,EAAgBZ,IAAOE,IAAV,K,iMCDJgB,MAVf,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,KACE,yCAOFN,EAAgBZ,IAAOE,IAAV,KCSJiB,MAdf,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAWnB,IACrC,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,SAASC,UAAWL,IACtC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,SAASC,UAAWJ,KAExC,kBAAC,EAAD,QCNcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6db6d0d3.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nfunction Header() {\n  return (\n    <Fragment>\n      <HeaderContainer>\n        <Title to=\"/Home\">김어진's Blog</Title>\n      </HeaderContainer>\n    </Fragment>\n  );\n}\n\nexport default Header;\n\nconst Title = styled(Link)`\n  font-size: 30px;\n  font-weight: bold;\n  text-decoration: none;\n  color: black;\n`;\n\nconst HeaderContainer = styled.div`\n  position: fixed;\n  display: flex;\n  top: 0;\n  justify-content: center;\n  align-items: center;\n  height: 100px;\n  width: 100%;\n  border-bottom: 1px solid lightgray;\n  box-sizing: border-box;\n  background-color: white;\n`;\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nfunction Home() {\n  const Posts = [\n    {\n      Title: \"첫 글\",\n      Article: \"첫 글입니다.\",\n      Time: \"6월 15일\",\n      Post: \"Post1\",\n    },\n    {\n      Title: \"두번째 글\",\n      Article: \"두번째 글입니다.\",\n      Time: \"6월 15일\",\n      Post: \"Post2\",\n    },\n  ];\n  const RanderPosts = Posts.map((data) => {\n    return (\n      <PostBox to={data.Post}>\n        <Title>{data.Title}</Title>\n        <Article>{data.Article}</Article>\n        <Time>{data.Time}</Time>\n      </PostBox>\n    );\n  });\n  return (\n    <Fragment>\n      <BodyContainer>\n        <PostsContainer>\n          <Category>게시물 ({Posts.length})</Category>\n          {RanderPosts}\n        </PostsContainer>\n      </BodyContainer>\n    </Fragment>\n  );\n}\n\nexport default Home;\nconst Category = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0px 50px;\n\n  height: 100px;\n  font-size: 28px;\n  color: gray;\n  box-sizing: border-box;\n`;\n\nconst Title = styled.div`\n  font-size: 24px;\n  font-weight: bold;\n  margin: 10px;\n  color: black;\n  &:hover {\n    color: gray;\n  }\n`;\nconst Article = styled.div`\n  font-size: 16px;\n  margin: 10px;\n  color: black;\n`;\nconst Time = styled.div`\n  font-size: 12px;\n  margin: 10px;\n  color: black;\n`;\n\nconst PostBox = styled(Link)`\n  display: block;\n  text-decoration: none;\n  cursor: pointer;\n  box-shadow: 1px 1px 2px 1px rgba(0, 0, 0, 0.18);\n  padding: 30px;\n  border-radius: 20px;\n  margin-bottom: 30px;\n`;\n\nconst PostsContainer = styled.div`\n  padding: 20px;\n`;\nconst BodyContainer = styled.div`\n  margin-top: 100px;\n  padding: 0px 100px;\n  /* border: 3px dashed red; */\n  box-sizing: border-box;\n  min-height: 1000px;\n`;\n","import React from \"react\";\n\nfunction Footer() {\n  return <div></div>;\n}\n\nexport default Footer;\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nfunction Post1() {\n  return (\n    <Fragment>\n      <BodyContainer>\n        <div>111</div>\n      </BodyContainer>\n    </Fragment>\n  );\n}\n\nexport default Post1;\nconst BodyContainer = styled.div`\n  margin-top: 100px;\n  padding: 0px 100px;\n  border: 3px dashed red;\n  box-sizing: border-box;\n  min-height: 1000px;\n`;\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nfunction Post2() {\n  return (\n    <Fragment>\n      <BodyContainer>\n        <div>post2</div>\n      </BodyContainer>\n    </Fragment>\n  );\n}\n\nexport default Post2;\nconst BodyContainer = styled.div`\n  margin-top: 100px;\n  padding: 0px 100px;\n  border: 3px dashed red;\n  box-sizing: border-box;\n  min-height: 1000px;\n`;\n","import React, { Fragment } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Header from \"./Views/Header\";\nimport Home from \"./Views/Home\";\nimport Footer from \"./Views/Footer\";\nimport Post1 from \"./Posts/Post1\";\nimport Post2 from \"./Posts/Post2\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <BrowserRouter>\n        <Header />\n        <Route exact path=\"/Home\" component={Home} />\n        <Route exact path=\"/Post1\" component={Post1} />\n        <Route exact path=\"/Post2\" component={Post2} />\n      </BrowserRouter>\n      <Footer />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}